import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

public class BreakoutGame extends JPanel implements KeyListener, ActionListener {
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    private static final int BALL_DIAMETER = 20;
    private static final int PADDLE_WIDTH = 100;
    private static final int PADDLE_HEIGHT = 10;
    private static final int PADDLE_SPEED = 10;
    private static final int BRICK_WIDTH = 80;
    private static final int BRICK_HEIGHT = 20;
    private static final int NUM_BRICKS = 60;

    private int ballX, ballY, ballXSpeed, ballYSpeed;
    private int paddleX, paddleY;
    private boolean leftKeyPressed, rightKeyPressed;
    private ArrayList<Rectangle> bricks;
    private boolean ballInPlay;
    private Timer timer;

    public BreakoutGame() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        initGame();
        timer = new Timer(10, this);
        timer.start();
    }

    private void initGame() {
        ballX = WIDTH / 2 - BALL_DIAMETER / 2;
        ballY = HEIGHT - 50;
        ballXSpeed = 2;
        ballYSpeed = -2;
        paddleX = WIDTH / 2 - PADDLE_WIDTH / 2;
        paddleY = HEIGHT - 30;
        bricks = new ArrayList<>();
        for (int i = 0; i < NUM_BRICKS; i++) {
            bricks.add(new Rectangle((i % 10) * BRICK_WIDTH, 50 + (i / 10) * BRICK_HEIGHT, BRICK_WIDTH, BRICK_HEIGHT));
        }
        ballInPlay = true;
    }

    private void moveBall() {
        ballX += ballXSpeed;
        ballY += ballYSpeed;

        if (ballX <= 0 || ballX >= WIDTH - BALL_DIAMETER) {
            ballXSpeed = -ballXSpeed;
        }
        if (ballY <= 0) {
            ballYSpeed = -ballYSpeed;
        }
        if (ballY >= HEIGHT - BALL_DIAMETER) {
            ballInPlay = false;
        }
        if (paddleCollision()) {
            ballYSpeed = -ballYSpeed;
        }
        for (int i = 0; i < bricks.size(); i++) {
            if (bricks.get(i).intersects(ballX, ballY, BALL_DIAMETER, BALL_DIAMETER)) {
                bricks.remove(i);
                ballYSpeed = -ballYSpeed;
                break;
            }
        }
    }

    private boolean paddleCollision() {
        return new Rectangle(paddleX, paddleY, PADDLE_WIDTH, PADDLE_HEIGHT).intersects(ballX, ballY, BALL_DIAMETER, BALL_DIAMETER);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (ballInPlay) {
            moveBall();
            movePaddle();
        }
        repaint();
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_LEFT) {
            leftKeyPressed = true;
        }
        if (key == KeyEvent.VK_RIGHT) {
            rightKeyPressed = true;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_LEFT) {
            leftKeyPressed = false;
        }
        if (key == KeyEvent.VK_RIGHT) {
            rightKeyPressed = false;
        }
    }

    private void movePaddle() {
        if (leftKeyPressed && paddleX > 0) {
            paddleX -= PADDLE_SPEED;
        }
        if (rightKeyPressed && paddleX < WIDTH - PADDLE_WIDTH) {
            paddleX += PADDLE_SPEED;
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    private void draw(Graphics g) {
        if (ballInPlay) {
            g.setColor(Color.blue);
            g.fillOval(ballX, ballY, BALL_DIAMETER, BALL_DIAMETER);
        }
        g.setColor(Color.red);
        g.fillRect(paddleX, paddleY, PADDLE_WIDTH, PADDLE_HEIGHT);
        for (Rectangle brick : bricks) {
            g.setColor(Color.green);
            g.fillRect(brick.x, brick.y, brick.width, brick.height);
        }
        if (!ballInPlay) {
            g.setColor(Color.black);
            g.setFont(new Font("Arial", Font.PLAIN, 30));
            g.drawString("Game Over", WIDTH / 2 - 100, HEIGHT / 2);
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Breakout Game");
        BreakoutGame game = new BreakoutGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
